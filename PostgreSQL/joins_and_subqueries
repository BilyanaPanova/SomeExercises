Question 01:
How can you produce a list of the start times for bookings by members named 'David Farrell'?

Answer:
SELECT
	starttime
FROM 
	cd.bookings AS b
JOIN
	cd.members AS m
	ON b.memid = m.memid
WHERE 
	m.firstname = 'David' 
	AND
	m.surname = 'Farrell'
;

----------------------------------------------------------------------------

Question 02:
How can you produce a list of the start times for bookings for tennis courts, for the date '2012-09-21'? 
Return a list of start time and facility name pairings, ordered by the time.

Answer:
SELECT
	b.starttime AS start,
	f.name 
FROM 
	cd.bookings AS b
JOIN
	cd.facilities AS f
	ON b.facid = f.facid
WHERE
	 b.starttime::date = '2012-09-21'
	 AND 
	 f.name LIKE '%Tennis Court%' 
ORDER BY
	b.starttime;

--------------------------------------------------------------------------

Question 03:
How can you output a list of all members who have recommended another member? 
Ensure that there are no duplicates in the list, and that results are ordered by (surname, firstname).

Answer:
SELECT DISTINCT
	m.firstname,
	m.surname
FROM
	cd.members AS m
JOIN 
	cd.members AS mem
	ON m.memid = mem.recommendedby
ORDER BY
	surname,
	firstname

---------------------------------------------------------------------------

Question 04:
How can you output a list of all members, including the individual who recommended them (if any)? 
Ensure that results are ordered by (surname, firstname).

Answer:
SELECT 
	m.firstname AS memfname,
	m.surname AS memsname,
	mem.firstname AS recfname,
	mem.surname AS recsname
FROM 
	cd.members AS m
LEFT OUTER JOIN 
	cd.members AS mem
	ON mem.memid = m.recommendedby
ORDER BY
	m.surname,
	m.firstname

----------------------------------------------------------------------------

Question 05:
How can you produce a list of all members who have used a tennis court? 
Include in your output the name of the court, and the name of the member formatted as a single column. 
Ensure no duplicate data, and order by the member name followed by the facility name.

Answer:
SELECT DISTINCT
	CONCAT(m.firstname,' ',m.surname) AS member,
	f.name AS facility
FROM 
	cd.members AS m
JOIN 
	cd.bookings AS b
	ON m.memid = b.memid
JOIN 
	cd.facilities AS f
	ON b.facid = f.facid
WHERE 
	f.name LIKE '%Tennis Court%'
ORDER BY 
	member,
	facility

-----------------------------------------------------------------------------

Question 06:
How can you produce a list of bookings on the day of 2012-09-14 which will cost the member (or guest) more than $30? 
Remember that guests have different costs to members (the listed costs are per half-hour 'slot'), and the guest user is always ID 0. 
Include in your output the name of the facility, the name of the member formatted as a single column, and the cost. 
Order by descending cost, and do not use any subqueries.

Answer:
SELECT 
	CONCAT(m.firstname,' ',m.surname) AS member,
	f.name AS facility,
	CASE                                   
    	WHEN b.memid = 0 THEN f.guestcost * b.slots   
   		ELSE f.membercost * b.slots                 
  	END AS cost 
FROM 
  cd.bookings AS b                  
JOIN 
  cd.facilities AS f 
  ON b.facid = f.facid    
JOIN 
  cd.members AS m 
  ON b.memid = m.memid
WHERE 
  b.starttime::date = '2012-09-14'
	AND (                                 
  CASE 
     WHEN b.memid = 0 THEN f.guestcost * b.slots
     ELSE f.membercost * b.slots
  END
	) > 30
ORDER BY
	cost DESC

-----------------------------------------------------------------------------

Question 07:
How can you output a list of all members, including the individual who recommended them (if any), without using any joins? 
Ensure that there are no duplicates in the list, and that each firstname + surname pairing is formatted as a column and ordered.

Answrs:
SELECT DISTINCT
	CONCAT(firstname,' ',surname) AS member,
	(SELECT
		CONCAT(firstname,' ',surname)
	 FROM cd.members AS r
	 WHERE r.memid = m.recommendedby) AS recommender
FROM 
	cd.members AS m
ORDER BY 
	member

----------------------------------------------------------------------------

Question 08:
The Produce a list of costly bookings exercise contained some messy logic: we had to calculate the booking cost in both the WHERE clause and the CASE statement.
Try to simplify this calculation using subqueries. For reference, the question was:

How can you produce a list of bookings on the day of 2012-09-14 which will cost the member (or guest) more than $30? 
Remember that guests have different costs to members (the listed costs are per half-hour 'slot'), and the guest user is always ID 0. 
Include in your output the name of the facility, the name of the member formatted as a single column, and the cost. Order by descending cost.

Answer:
SELECT
	member, 
	facility, 
	cost 
FROM (
	SELECT 
		m.firstname || ' ' || m.surname AS member,
		f.name as facility,
		CASE
			WHEN m.memid = 0 THEN b.slots*f.guestcost
			ELSE b.slots*f.membercost
		END AS cost
	FROM
		cd.members m
	JOIN cd.bookings b
		ON m.memid = b.memid
	JOIN cd.facilities f
		ON b.facid = f.facid
	WHERE
		b.starttime >= '2012-09-14'
  		AND
		b.starttime < '2012-09-15'
	) AS bookings
WHERE 
	cost > 30
ORDER BY
	cost desc;






